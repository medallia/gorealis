// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"apache/aurora"
	"flag"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
)

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "  Response setQuota(string ownerRole, ResourceAggregate quota)")
	fmt.Fprintln(os.Stderr, "  Response forceTaskState(string taskId, ScheduleStatus status)")
	fmt.Fprintln(os.Stderr, "  Response performBackup()")
	fmt.Fprintln(os.Stderr, "  Response listBackups()")
	fmt.Fprintln(os.Stderr, "  Response stageRecovery(string backupId)")
	fmt.Fprintln(os.Stderr, "  Response queryRecovery(TaskQuery query)")
	fmt.Fprintln(os.Stderr, "  Response deleteRecoveryTasks(TaskQuery query)")
	fmt.Fprintln(os.Stderr, "  Response commitRecovery()")
	fmt.Fprintln(os.Stderr, "  Response unloadRecovery()")
	fmt.Fprintln(os.Stderr, "  Response startMaintenance(Hosts hosts)")
	fmt.Fprintln(os.Stderr, "  Response drainHosts(Hosts hosts)")
	fmt.Fprintln(os.Stderr, "  Response maintenanceStatus(Hosts hosts)")
	fmt.Fprintln(os.Stderr, "  Response endMaintenance(Hosts hosts)")
	fmt.Fprintln(os.Stderr, "  Response slaDrainHosts(Hosts hosts, SlaPolicy defaultSlaPolicy, i64 timeoutSecs)")
	fmt.Fprintln(os.Stderr, "  Response snapshot()")
	fmt.Fprintln(os.Stderr, "  Response triggerExplicitTaskReconciliation(ExplicitReconciliationSettings settings)")
	fmt.Fprintln(os.Stderr, "  Response triggerImplicitTaskReconciliation()")
	fmt.Fprintln(os.Stderr, "  Response pruneTasks(TaskQuery query)")
	fmt.Fprintln(os.Stderr, "  Response createJob(JobConfiguration description)")
	fmt.Fprintln(os.Stderr, "  Response scheduleCronJob(JobConfiguration description)")
	fmt.Fprintln(os.Stderr, "  Response descheduleCronJob(JobKey job)")
	fmt.Fprintln(os.Stderr, "  Response startCronJob(JobKey job)")
	fmt.Fprintln(os.Stderr, "  Response restartShards(JobKey job,  shardIds)")
	fmt.Fprintln(os.Stderr, "  Response killTasks(JobKey job,  instances, string message)")
	fmt.Fprintln(os.Stderr, "  Response addInstances(InstanceKey key, i32 count)")
	fmt.Fprintln(os.Stderr, "  Response replaceCronTemplate(JobConfiguration config)")
	fmt.Fprintln(os.Stderr, "  Response startJobUpdate(JobUpdateRequest request, string message)")
	fmt.Fprintln(os.Stderr, "  Response pauseJobUpdate(JobUpdateKey key, string message)")
	fmt.Fprintln(os.Stderr, "  Response resumeJobUpdate(JobUpdateKey key, string message)")
	fmt.Fprintln(os.Stderr, "  Response abortJobUpdate(JobUpdateKey key, string message)")
	fmt.Fprintln(os.Stderr, "  Response rollbackJobUpdate(JobUpdateKey key, string message)")
	fmt.Fprintln(os.Stderr, "  Response pulseJobUpdate(JobUpdateKey key)")
	fmt.Fprintln(os.Stderr, "  Response getRoleSummary()")
	fmt.Fprintln(os.Stderr, "  Response getJobSummary(string role)")
	fmt.Fprintln(os.Stderr, "  Response getTasksStatus(TaskQuery query)")
	fmt.Fprintln(os.Stderr, "  Response getTasksWithoutConfigs(TaskQuery query)")
	fmt.Fprintln(os.Stderr, "  Response getPendingReason(TaskQuery query)")
	fmt.Fprintln(os.Stderr, "  Response getConfigSummary(JobKey job)")
	fmt.Fprintln(os.Stderr, "  Response getJobs(string ownerRole)")
	fmt.Fprintln(os.Stderr, "  Response getQuota(string ownerRole)")
	fmt.Fprintln(os.Stderr, "  Response populateJobConfig(JobConfiguration description)")
	fmt.Fprintln(os.Stderr, "  Response getJobUpdateSummaries(JobUpdateQuery jobUpdateQuery)")
	fmt.Fprintln(os.Stderr, "  Response getJobUpdateDetails(JobUpdateKey key, JobUpdateQuery query)")
	fmt.Fprintln(os.Stderr, "  Response getJobUpdateDiff(JobUpdateRequest request)")
	fmt.Fprintln(os.Stderr, "  Response getTierConfigs()")
	fmt.Fprintln(os.Stderr)
	os.Exit(0)
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	var parsedUrl url.URL
	var trans thrift.TTransport
	_ = strconv.Atoi
	_ = math.Abs
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Parse()

	if len(urlString) > 0 {
		parsedUrl, err := url.Parse(urlString)
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
	}

	cmd := flag.Arg(0)
	var err error
	if useHttp {
		trans, err = thrift.NewTHttpClient(parsedUrl.String())
	} else {
		portStr := fmt.Sprint(port)
		if strings.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
			if err != nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
				os.Exit(1)
			}
		}
		trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
		if err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
			os.Exit(1)
		}
		if framed {
			trans = thrift.NewTFramedTransport(trans)
		}
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewTCompactProtocolFactory()
		break
	case "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
		break
	case "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
		break
	case "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
		Usage()
		os.Exit(1)
	}
	client := aurora.NewAuroraAdminClientFactory(trans, protocolFactory)
	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}

	switch cmd {
	case "setQuota":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "SetQuota requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg368 := flag.Arg(2)
		mbTrans369 := thrift.NewTMemoryBufferLen(len(arg368))
		defer mbTrans369.Close()
		_, err370 := mbTrans369.WriteString(arg368)
		if err370 != nil {
			Usage()
			return
		}
		factory371 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt372 := factory371.GetProtocol(mbTrans369)
		argvalue1 := aurora.NewResourceAggregate()
		err373 := argvalue1.Read(jsProt372)
		if err373 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.SetQuota(value0, value1))
		fmt.Print("\n")
		break
	case "forceTaskState":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "ForceTaskState requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		tmp1, err := (strconv.Atoi(flag.Arg(2)))
		if err != nil {
			Usage()
			return
		}
		argvalue1 := aurora.ScheduleStatus(tmp1)
		value1 := argvalue1
		fmt.Print(client.ForceTaskState(value0, value1))
		fmt.Print("\n")
		break
	case "performBackup":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "PerformBackup requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.PerformBackup())
		fmt.Print("\n")
		break
	case "listBackups":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "ListBackups requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.ListBackups())
		fmt.Print("\n")
		break
	case "stageRecovery":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "StageRecovery requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.StageRecovery(value0))
		fmt.Print("\n")
		break
	case "queryRecovery":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "QueryRecovery requires 1 args")
			flag.Usage()
		}
		arg376 := flag.Arg(1)
		mbTrans377 := thrift.NewTMemoryBufferLen(len(arg376))
		defer mbTrans377.Close()
		_, err378 := mbTrans377.WriteString(arg376)
		if err378 != nil {
			Usage()
			return
		}
		factory379 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt380 := factory379.GetProtocol(mbTrans377)
		argvalue0 := aurora.NewTaskQuery()
		err381 := argvalue0.Read(jsProt380)
		if err381 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.QueryRecovery(value0))
		fmt.Print("\n")
		break
	case "deleteRecoveryTasks":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DeleteRecoveryTasks requires 1 args")
			flag.Usage()
		}
		arg382 := flag.Arg(1)
		mbTrans383 := thrift.NewTMemoryBufferLen(len(arg382))
		defer mbTrans383.Close()
		_, err384 := mbTrans383.WriteString(arg382)
		if err384 != nil {
			Usage()
			return
		}
		factory385 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt386 := factory385.GetProtocol(mbTrans383)
		argvalue0 := aurora.NewTaskQuery()
		err387 := argvalue0.Read(jsProt386)
		if err387 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DeleteRecoveryTasks(value0))
		fmt.Print("\n")
		break
	case "commitRecovery":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "CommitRecovery requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.CommitRecovery())
		fmt.Print("\n")
		break
	case "unloadRecovery":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "UnloadRecovery requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.UnloadRecovery())
		fmt.Print("\n")
		break
	case "startMaintenance":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "StartMaintenance requires 1 args")
			flag.Usage()
		}
		arg388 := flag.Arg(1)
		mbTrans389 := thrift.NewTMemoryBufferLen(len(arg388))
		defer mbTrans389.Close()
		_, err390 := mbTrans389.WriteString(arg388)
		if err390 != nil {
			Usage()
			return
		}
		factory391 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt392 := factory391.GetProtocol(mbTrans389)
		argvalue0 := aurora.NewHosts()
		err393 := argvalue0.Read(jsProt392)
		if err393 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.StartMaintenance(value0))
		fmt.Print("\n")
		break
	case "drainHosts":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DrainHosts requires 1 args")
			flag.Usage()
		}
		arg394 := flag.Arg(1)
		mbTrans395 := thrift.NewTMemoryBufferLen(len(arg394))
		defer mbTrans395.Close()
		_, err396 := mbTrans395.WriteString(arg394)
		if err396 != nil {
			Usage()
			return
		}
		factory397 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt398 := factory397.GetProtocol(mbTrans395)
		argvalue0 := aurora.NewHosts()
		err399 := argvalue0.Read(jsProt398)
		if err399 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DrainHosts(value0))
		fmt.Print("\n")
		break
	case "maintenanceStatus":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "MaintenanceStatus requires 1 args")
			flag.Usage()
		}
		arg400 := flag.Arg(1)
		mbTrans401 := thrift.NewTMemoryBufferLen(len(arg400))
		defer mbTrans401.Close()
		_, err402 := mbTrans401.WriteString(arg400)
		if err402 != nil {
			Usage()
			return
		}
		factory403 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt404 := factory403.GetProtocol(mbTrans401)
		argvalue0 := aurora.NewHosts()
		err405 := argvalue0.Read(jsProt404)
		if err405 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.MaintenanceStatus(value0))
		fmt.Print("\n")
		break
	case "endMaintenance":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "EndMaintenance requires 1 args")
			flag.Usage()
		}
		arg406 := flag.Arg(1)
		mbTrans407 := thrift.NewTMemoryBufferLen(len(arg406))
		defer mbTrans407.Close()
		_, err408 := mbTrans407.WriteString(arg406)
		if err408 != nil {
			Usage()
			return
		}
		factory409 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt410 := factory409.GetProtocol(mbTrans407)
		argvalue0 := aurora.NewHosts()
		err411 := argvalue0.Read(jsProt410)
		if err411 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.EndMaintenance(value0))
		fmt.Print("\n")
		break
	case "slaDrainHosts":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "SlaDrainHosts requires 3 args")
			flag.Usage()
		}
		arg412 := flag.Arg(1)
		mbTrans413 := thrift.NewTMemoryBufferLen(len(arg412))
		defer mbTrans413.Close()
		_, err414 := mbTrans413.WriteString(arg412)
		if err414 != nil {
			Usage()
			return
		}
		factory415 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt416 := factory415.GetProtocol(mbTrans413)
		argvalue0 := aurora.NewHosts()
		err417 := argvalue0.Read(jsProt416)
		if err417 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg418 := flag.Arg(2)
		mbTrans419 := thrift.NewTMemoryBufferLen(len(arg418))
		defer mbTrans419.Close()
		_, err420 := mbTrans419.WriteString(arg418)
		if err420 != nil {
			Usage()
			return
		}
		factory421 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt422 := factory421.GetProtocol(mbTrans419)
		argvalue1 := aurora.NewSlaPolicy()
		err423 := argvalue1.Read(jsProt422)
		if err423 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		argvalue2, err424 := (strconv.ParseInt(flag.Arg(3), 10, 64))
		if err424 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		fmt.Print(client.SlaDrainHosts(value0, value1, value2))
		fmt.Print("\n")
		break
	case "snapshot":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "Snapshot requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.Snapshot())
		fmt.Print("\n")
		break
	case "triggerExplicitTaskReconciliation":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "TriggerExplicitTaskReconciliation requires 1 args")
			flag.Usage()
		}
		arg425 := flag.Arg(1)
		mbTrans426 := thrift.NewTMemoryBufferLen(len(arg425))
		defer mbTrans426.Close()
		_, err427 := mbTrans426.WriteString(arg425)
		if err427 != nil {
			Usage()
			return
		}
		factory428 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt429 := factory428.GetProtocol(mbTrans426)
		argvalue0 := aurora.NewExplicitReconciliationSettings()
		err430 := argvalue0.Read(jsProt429)
		if err430 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.TriggerExplicitTaskReconciliation(value0))
		fmt.Print("\n")
		break
	case "triggerImplicitTaskReconciliation":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "TriggerImplicitTaskReconciliation requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.TriggerImplicitTaskReconciliation())
		fmt.Print("\n")
		break
	case "pruneTasks":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "PruneTasks requires 1 args")
			flag.Usage()
		}
		arg431 := flag.Arg(1)
		mbTrans432 := thrift.NewTMemoryBufferLen(len(arg431))
		defer mbTrans432.Close()
		_, err433 := mbTrans432.WriteString(arg431)
		if err433 != nil {
			Usage()
			return
		}
		factory434 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt435 := factory434.GetProtocol(mbTrans432)
		argvalue0 := aurora.NewTaskQuery()
		err436 := argvalue0.Read(jsProt435)
		if err436 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.PruneTasks(value0))
		fmt.Print("\n")
		break
	case "createJob":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "CreateJob requires 1 args")
			flag.Usage()
		}
		arg437 := flag.Arg(1)
		mbTrans438 := thrift.NewTMemoryBufferLen(len(arg437))
		defer mbTrans438.Close()
		_, err439 := mbTrans438.WriteString(arg437)
		if err439 != nil {
			Usage()
			return
		}
		factory440 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt441 := factory440.GetProtocol(mbTrans438)
		argvalue0 := aurora.NewJobConfiguration()
		err442 := argvalue0.Read(jsProt441)
		if err442 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.CreateJob(value0))
		fmt.Print("\n")
		break
	case "scheduleCronJob":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ScheduleCronJob requires 1 args")
			flag.Usage()
		}
		arg443 := flag.Arg(1)
		mbTrans444 := thrift.NewTMemoryBufferLen(len(arg443))
		defer mbTrans444.Close()
		_, err445 := mbTrans444.WriteString(arg443)
		if err445 != nil {
			Usage()
			return
		}
		factory446 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt447 := factory446.GetProtocol(mbTrans444)
		argvalue0 := aurora.NewJobConfiguration()
		err448 := argvalue0.Read(jsProt447)
		if err448 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.ScheduleCronJob(value0))
		fmt.Print("\n")
		break
	case "descheduleCronJob":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DescheduleCronJob requires 1 args")
			flag.Usage()
		}
		arg449 := flag.Arg(1)
		mbTrans450 := thrift.NewTMemoryBufferLen(len(arg449))
		defer mbTrans450.Close()
		_, err451 := mbTrans450.WriteString(arg449)
		if err451 != nil {
			Usage()
			return
		}
		factory452 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt453 := factory452.GetProtocol(mbTrans450)
		argvalue0 := aurora.NewJobKey()
		err454 := argvalue0.Read(jsProt453)
		if err454 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.DescheduleCronJob(value0))
		fmt.Print("\n")
		break
	case "startCronJob":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "StartCronJob requires 1 args")
			flag.Usage()
		}
		arg455 := flag.Arg(1)
		mbTrans456 := thrift.NewTMemoryBufferLen(len(arg455))
		defer mbTrans456.Close()
		_, err457 := mbTrans456.WriteString(arg455)
		if err457 != nil {
			Usage()
			return
		}
		factory458 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt459 := factory458.GetProtocol(mbTrans456)
		argvalue0 := aurora.NewJobKey()
		err460 := argvalue0.Read(jsProt459)
		if err460 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.StartCronJob(value0))
		fmt.Print("\n")
		break
	case "restartShards":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "RestartShards requires 2 args")
			flag.Usage()
		}
		arg461 := flag.Arg(1)
		mbTrans462 := thrift.NewTMemoryBufferLen(len(arg461))
		defer mbTrans462.Close()
		_, err463 := mbTrans462.WriteString(arg461)
		if err463 != nil {
			Usage()
			return
		}
		factory464 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt465 := factory464.GetProtocol(mbTrans462)
		argvalue0 := aurora.NewJobKey()
		err466 := argvalue0.Read(jsProt465)
		if err466 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg467 := flag.Arg(2)
		mbTrans468 := thrift.NewTMemoryBufferLen(len(arg467))
		defer mbTrans468.Close()
		_, err469 := mbTrans468.WriteString(arg467)
		if err469 != nil {
			Usage()
			return
		}
		factory470 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt471 := factory470.GetProtocol(mbTrans468)
		containerStruct1 := aurora.NewAuroraAdminRestartShardsArgs()
		err472 := containerStruct1.ReadField2(jsProt471)
		if err472 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.ShardIds
		value1 := argvalue1
		fmt.Print(client.RestartShards(value0, value1))
		fmt.Print("\n")
		break
	case "killTasks":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "KillTasks requires 3 args")
			flag.Usage()
		}
		arg473 := flag.Arg(1)
		mbTrans474 := thrift.NewTMemoryBufferLen(len(arg473))
		defer mbTrans474.Close()
		_, err475 := mbTrans474.WriteString(arg473)
		if err475 != nil {
			Usage()
			return
		}
		factory476 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt477 := factory476.GetProtocol(mbTrans474)
		argvalue0 := aurora.NewJobKey()
		err478 := argvalue0.Read(jsProt477)
		if err478 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg479 := flag.Arg(2)
		mbTrans480 := thrift.NewTMemoryBufferLen(len(arg479))
		defer mbTrans480.Close()
		_, err481 := mbTrans480.WriteString(arg479)
		if err481 != nil {
			Usage()
			return
		}
		factory482 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt483 := factory482.GetProtocol(mbTrans480)
		containerStruct1 := aurora.NewAuroraAdminKillTasksArgs()
		err484 := containerStruct1.ReadField2(jsProt483)
		if err484 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Instances
		value1 := argvalue1
		argvalue2 := flag.Arg(3)
		value2 := argvalue2
		fmt.Print(client.KillTasks(value0, value1, value2))
		fmt.Print("\n")
		break
	case "addInstances":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AddInstances requires 2 args")
			flag.Usage()
		}
		arg486 := flag.Arg(1)
		mbTrans487 := thrift.NewTMemoryBufferLen(len(arg486))
		defer mbTrans487.Close()
		_, err488 := mbTrans487.WriteString(arg486)
		if err488 != nil {
			Usage()
			return
		}
		factory489 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt490 := factory489.GetProtocol(mbTrans487)
		argvalue0 := aurora.NewInstanceKey()
		err491 := argvalue0.Read(jsProt490)
		if err491 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		tmp1, err492 := (strconv.Atoi(flag.Arg(2)))
		if err492 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		fmt.Print(client.AddInstances(value0, value1))
		fmt.Print("\n")
		break
	case "replaceCronTemplate":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ReplaceCronTemplate requires 1 args")
			flag.Usage()
		}
		arg493 := flag.Arg(1)
		mbTrans494 := thrift.NewTMemoryBufferLen(len(arg493))
		defer mbTrans494.Close()
		_, err495 := mbTrans494.WriteString(arg493)
		if err495 != nil {
			Usage()
			return
		}
		factory496 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt497 := factory496.GetProtocol(mbTrans494)
		argvalue0 := aurora.NewJobConfiguration()
		err498 := argvalue0.Read(jsProt497)
		if err498 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.ReplaceCronTemplate(value0))
		fmt.Print("\n")
		break
	case "startJobUpdate":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "StartJobUpdate requires 2 args")
			flag.Usage()
		}
		arg499 := flag.Arg(1)
		mbTrans500 := thrift.NewTMemoryBufferLen(len(arg499))
		defer mbTrans500.Close()
		_, err501 := mbTrans500.WriteString(arg499)
		if err501 != nil {
			Usage()
			return
		}
		factory502 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt503 := factory502.GetProtocol(mbTrans500)
		argvalue0 := aurora.NewJobUpdateRequest()
		err504 := argvalue0.Read(jsProt503)
		if err504 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.StartJobUpdate(value0, value1))
		fmt.Print("\n")
		break
	case "pauseJobUpdate":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "PauseJobUpdate requires 2 args")
			flag.Usage()
		}
		arg506 := flag.Arg(1)
		mbTrans507 := thrift.NewTMemoryBufferLen(len(arg506))
		defer mbTrans507.Close()
		_, err508 := mbTrans507.WriteString(arg506)
		if err508 != nil {
			Usage()
			return
		}
		factory509 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt510 := factory509.GetProtocol(mbTrans507)
		argvalue0 := aurora.NewJobUpdateKey()
		err511 := argvalue0.Read(jsProt510)
		if err511 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.PauseJobUpdate(value0, value1))
		fmt.Print("\n")
		break
	case "resumeJobUpdate":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "ResumeJobUpdate requires 2 args")
			flag.Usage()
		}
		arg513 := flag.Arg(1)
		mbTrans514 := thrift.NewTMemoryBufferLen(len(arg513))
		defer mbTrans514.Close()
		_, err515 := mbTrans514.WriteString(arg513)
		if err515 != nil {
			Usage()
			return
		}
		factory516 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt517 := factory516.GetProtocol(mbTrans514)
		argvalue0 := aurora.NewJobUpdateKey()
		err518 := argvalue0.Read(jsProt517)
		if err518 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.ResumeJobUpdate(value0, value1))
		fmt.Print("\n")
		break
	case "abortJobUpdate":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "AbortJobUpdate requires 2 args")
			flag.Usage()
		}
		arg520 := flag.Arg(1)
		mbTrans521 := thrift.NewTMemoryBufferLen(len(arg520))
		defer mbTrans521.Close()
		_, err522 := mbTrans521.WriteString(arg520)
		if err522 != nil {
			Usage()
			return
		}
		factory523 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt524 := factory523.GetProtocol(mbTrans521)
		argvalue0 := aurora.NewJobUpdateKey()
		err525 := argvalue0.Read(jsProt524)
		if err525 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.AbortJobUpdate(value0, value1))
		fmt.Print("\n")
		break
	case "rollbackJobUpdate":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "RollbackJobUpdate requires 2 args")
			flag.Usage()
		}
		arg527 := flag.Arg(1)
		mbTrans528 := thrift.NewTMemoryBufferLen(len(arg527))
		defer mbTrans528.Close()
		_, err529 := mbTrans528.WriteString(arg527)
		if err529 != nil {
			Usage()
			return
		}
		factory530 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt531 := factory530.GetProtocol(mbTrans528)
		argvalue0 := aurora.NewJobUpdateKey()
		err532 := argvalue0.Read(jsProt531)
		if err532 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.RollbackJobUpdate(value0, value1))
		fmt.Print("\n")
		break
	case "pulseJobUpdate":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "PulseJobUpdate requires 1 args")
			flag.Usage()
		}
		arg534 := flag.Arg(1)
		mbTrans535 := thrift.NewTMemoryBufferLen(len(arg534))
		defer mbTrans535.Close()
		_, err536 := mbTrans535.WriteString(arg534)
		if err536 != nil {
			Usage()
			return
		}
		factory537 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt538 := factory537.GetProtocol(mbTrans535)
		argvalue0 := aurora.NewJobUpdateKey()
		err539 := argvalue0.Read(jsProt538)
		if err539 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.PulseJobUpdate(value0))
		fmt.Print("\n")
		break
	case "getRoleSummary":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetRoleSummary requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetRoleSummary())
		fmt.Print("\n")
		break
	case "getJobSummary":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetJobSummary requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetJobSummary(value0))
		fmt.Print("\n")
		break
	case "getTasksStatus":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTasksStatus requires 1 args")
			flag.Usage()
		}
		arg541 := flag.Arg(1)
		mbTrans542 := thrift.NewTMemoryBufferLen(len(arg541))
		defer mbTrans542.Close()
		_, err543 := mbTrans542.WriteString(arg541)
		if err543 != nil {
			Usage()
			return
		}
		factory544 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt545 := factory544.GetProtocol(mbTrans542)
		argvalue0 := aurora.NewTaskQuery()
		err546 := argvalue0.Read(jsProt545)
		if err546 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetTasksStatus(value0))
		fmt.Print("\n")
		break
	case "getTasksWithoutConfigs":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTasksWithoutConfigs requires 1 args")
			flag.Usage()
		}
		arg547 := flag.Arg(1)
		mbTrans548 := thrift.NewTMemoryBufferLen(len(arg547))
		defer mbTrans548.Close()
		_, err549 := mbTrans548.WriteString(arg547)
		if err549 != nil {
			Usage()
			return
		}
		factory550 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt551 := factory550.GetProtocol(mbTrans548)
		argvalue0 := aurora.NewTaskQuery()
		err552 := argvalue0.Read(jsProt551)
		if err552 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetTasksWithoutConfigs(value0))
		fmt.Print("\n")
		break
	case "getPendingReason":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetPendingReason requires 1 args")
			flag.Usage()
		}
		arg553 := flag.Arg(1)
		mbTrans554 := thrift.NewTMemoryBufferLen(len(arg553))
		defer mbTrans554.Close()
		_, err555 := mbTrans554.WriteString(arg553)
		if err555 != nil {
			Usage()
			return
		}
		factory556 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt557 := factory556.GetProtocol(mbTrans554)
		argvalue0 := aurora.NewTaskQuery()
		err558 := argvalue0.Read(jsProt557)
		if err558 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetPendingReason(value0))
		fmt.Print("\n")
		break
	case "getConfigSummary":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetConfigSummary requires 1 args")
			flag.Usage()
		}
		arg559 := flag.Arg(1)
		mbTrans560 := thrift.NewTMemoryBufferLen(len(arg559))
		defer mbTrans560.Close()
		_, err561 := mbTrans560.WriteString(arg559)
		if err561 != nil {
			Usage()
			return
		}
		factory562 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt563 := factory562.GetProtocol(mbTrans560)
		argvalue0 := aurora.NewJobKey()
		err564 := argvalue0.Read(jsProt563)
		if err564 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetConfigSummary(value0))
		fmt.Print("\n")
		break
	case "getJobs":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetJobs requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetJobs(value0))
		fmt.Print("\n")
		break
	case "getQuota":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetQuota requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.GetQuota(value0))
		fmt.Print("\n")
		break
	case "populateJobConfig":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "PopulateJobConfig requires 1 args")
			flag.Usage()
		}
		arg567 := flag.Arg(1)
		mbTrans568 := thrift.NewTMemoryBufferLen(len(arg567))
		defer mbTrans568.Close()
		_, err569 := mbTrans568.WriteString(arg567)
		if err569 != nil {
			Usage()
			return
		}
		factory570 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt571 := factory570.GetProtocol(mbTrans568)
		argvalue0 := aurora.NewJobConfiguration()
		err572 := argvalue0.Read(jsProt571)
		if err572 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.PopulateJobConfig(value0))
		fmt.Print("\n")
		break
	case "getJobUpdateSummaries":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetJobUpdateSummaries requires 1 args")
			flag.Usage()
		}
		arg573 := flag.Arg(1)
		mbTrans574 := thrift.NewTMemoryBufferLen(len(arg573))
		defer mbTrans574.Close()
		_, err575 := mbTrans574.WriteString(arg573)
		if err575 != nil {
			Usage()
			return
		}
		factory576 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt577 := factory576.GetProtocol(mbTrans574)
		argvalue0 := aurora.NewJobUpdateQuery()
		err578 := argvalue0.Read(jsProt577)
		if err578 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetJobUpdateSummaries(value0))
		fmt.Print("\n")
		break
	case "getJobUpdateDetails":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "GetJobUpdateDetails requires 2 args")
			flag.Usage()
		}
		arg579 := flag.Arg(1)
		mbTrans580 := thrift.NewTMemoryBufferLen(len(arg579))
		defer mbTrans580.Close()
		_, err581 := mbTrans580.WriteString(arg579)
		if err581 != nil {
			Usage()
			return
		}
		factory582 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt583 := factory582.GetProtocol(mbTrans580)
		argvalue0 := aurora.NewJobUpdateKey()
		err584 := argvalue0.Read(jsProt583)
		if err584 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		arg585 := flag.Arg(2)
		mbTrans586 := thrift.NewTMemoryBufferLen(len(arg585))
		defer mbTrans586.Close()
		_, err587 := mbTrans586.WriteString(arg585)
		if err587 != nil {
			Usage()
			return
		}
		factory588 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt589 := factory588.GetProtocol(mbTrans586)
		argvalue1 := aurora.NewJobUpdateQuery()
		err590 := argvalue1.Read(jsProt589)
		if err590 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		fmt.Print(client.GetJobUpdateDetails(value0, value1))
		fmt.Print("\n")
		break
	case "getJobUpdateDiff":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetJobUpdateDiff requires 1 args")
			flag.Usage()
		}
		arg591 := flag.Arg(1)
		mbTrans592 := thrift.NewTMemoryBufferLen(len(arg591))
		defer mbTrans592.Close()
		_, err593 := mbTrans592.WriteString(arg591)
		if err593 != nil {
			Usage()
			return
		}
		factory594 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt595 := factory594.GetProtocol(mbTrans592)
		argvalue0 := aurora.NewJobUpdateRequest()
		err596 := argvalue0.Read(jsProt595)
		if err596 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.GetJobUpdateDiff(value0))
		fmt.Print("\n")
		break
	case "getTierConfigs":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetTierConfigs requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetTierConfigs())
		fmt.Print("\n")
		break
	case "":
		Usage()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
	}
}
